https://www.swi-prolog.org/pldoc/man?section=arith

Infix relational operators: <, >, =<, >=, =\=, =:=

Infix arithmetic operators: +, -, *
/ performs real division (ℝ X ℝ  - {0} -> ℝ)
// integer division -> truncate (ℤ X ℤ - {0} -> ℤ)
div integer division -> floor (ℤ X ℤ - {0} -> ℤ)

?- X is 10//-3.
ERROR: Syntax error: Operator expected
ERROR: X is 1
ERROR: ** here **
ERROR: 0//-3 . 
?- X is 10 // -3.
X = -3.

????
Legal:
?- X is 10//3.
?- X is 10// -3.

M // N == truncate(M / N)  [Primary value of (truncate (/ m n))]
M div N == floor(M / N)   [Primary value of (floor (/ m n))]

Thus, ℤ use //, div.
ℝ use floor/2 truncate/2

?- truncate(-7/2, F).
ERROR: Undefined procedure: truncate/2 (DWIM could not correct goal)
?- X is truncate(-7/2).
X = -3.

mod, rem same as Lisp

  x   y   //   rem   div   mod
 10   3   3     1     3     1
 10  -3  -3     1    -4    -2
-10   3  -3    -1    -4     2
-10  -3   3    -1     3    -1

sqrt/2

Exponentiation: **/2    (^/2)
2**3
2^3

?- X is exp(1).
X = 2.718281828459045.

?- e =:= exp(1).
true.

?- X is e.
X = 2.718281828459045.

?- X is pi.
X = 3.141592653589793.

min/2
max/2

================================================================================
Rational numbers
rdiv(2, 3)
2 rdiv 3

?- set_prolog_flag(prefer_rationals, true).     <--- Rational division => rational
true.

?- set_prolog_flag(rational_syntax, natural).   <--- 2/3 vs. 2r3
true.
================================================================================
Lab §2.3 ex. 2
eval(X) :- A is X, write(A).

?- eval(sin(5)*sin(5) + cos(5)*cos(5)).
0.9999999999999999
true.




Slade ch. 2 2010
fahrenheit(F, C) :- C is (F - 32) * 5 / 9.
celsius(C, F) :- F is 9 / 5 * C + 32.

zerop(X) :- X =:= 0.
plusp(X) :- X > 0.
minusp(X) :- X < 0.
evenp(X) :- X mod 2 =:= 0.
oddp(X) :- X mod 2 =:= 1.

lcm(X, Y, Z) :-
    Z is X * Y // gcd(X, Y).

logB(X, B, L) :-
    L is log(X) / log(B).

degrees_to_radians(D, R) :-
    R is D * pi / 180.

sec(Ang, Sec) :- Sec is 1 / cos(Ang).
cosec(Ang, Cosec) :- Cosec is 1 / sin(Ang).
cotan(Ang, Cotan) :- Cotan is 1 / tan(Ang).
----------------------------------------------------------
Inline operators:
min_abs4(A, B, C, D, M) :- Aa is abs(A),
                           Ba is abs(B),
                           Ca is abs(C),
                           Da is abs(D),
                           M1 is min(Aa, Ba),
                           M2 is min(Ca, Da),
                           M is min(M1, M2).

min_abs4(X1, X2, X3, X4, Y) :-
    Y is min(min(abs(X1), abs(X2)), min(abs(X3), abs(X4))).


son_of_zeller(D, M, Y, Z) :-
    leap_year(Y),
    !,
    C is Y // 100,
    Y1 is Y mod 100,
    zeller(D, M, C, Y1, 1, Z).

vs.

son_of_zeller(Day, Month, Year, Z) :- leap_year(Year), zeller(Day, Month, Year//100, Year mod 100, 1, Z).
The terms Year // 100 and Year mod 100 are passed in this way. It is only because
`zeller` uses `is` to force evaluation that this works!!
----------------------------------------------------------
leap_year(Y) :- 0 is Y mod 100, !,
                0 is Y mod 400.
leap_year(Y) :- 0 is Y mod 4.

vs.

leap_year(Y) :- Y mod 400 =:= 0, !.
leap_year(Y) :- Y mod 100 =\= 0, Y mod 4 =:= 0.


Float infinity:
?- X is -1.0Inf.
X = -1.0Inf.

?- X is 1.0Inf.
X = 1.0Inf.

NaN
?- X is nan.
X = 1.5NaN.
